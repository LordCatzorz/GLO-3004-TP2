//*******************************************************
//* File:    Z:/Users/nataw/Documents/LocalTawbi/Cours/SF/Hiv16/TPs/Hiv16/TransactionsBancaires.pd
//* Author:  Nadia Tawbi
//* Created: 18:38:57 on Sunday March  2019 UTC
//*******************************************************


// num√©ro de compte maximal
const maxNum: int ^= 29999;

class NumCompte ^= those j: int :- 1 <= j <= maxNum;

class Type_Jour ^= those j: int :- 1 <= j <= 31;
class Type_Mois ^= those m: int :- 1 <= m <= 12;
class Type_Annee ^= those a: int :- 1900 <= a <= 20000;

class Date ^=
abstract
	var
		jour: Type_Jour,
		mois: Type_Mois,
		annee: Type_Annee;
	invariant
		(
			[mois in set of int {1,3,5,7,8,10,12}] : 1 <= jour & jour <= 31,
			[ mois in set of int {4,6,9,11}] : 1 <= jour & jour <= 30,
			[ mois = 2 & (annee % 4 = 0 )&(annee % 100 ~= 0)] : 1 <= jour <= 29,
			[ mois = 2 & (annee % 400 = 0) ] : 1 <= jour & jour <= 29,
			[ ] : 1 <= jour <= 28
		);
interface
	build{!jour: Type_Jour, !mois: Type_Mois, !annee: Type_Annee}
	pre
	(
		[mois in set of int {1,3,5,7,8,10,12}] : 1 <= jour & jour <= 31,
		[ mois in set of int {4,6,9,11}] : 1 <= jour & jour <= 30,
		[ mois = 2 & (annee % 4 = 0 )&(annee % 100 ~= 0)] : 1 <= jour <= 29,
		[ mois = 2 & (annee % 400 = 0) ] : 1 <= jour & jour <= 29,
		[ ] : 1 <= jour <= 28
	);
	//end-build

	function jour, mois, annee
end;


class DateFermeture ^= Date || void;

const maxDepotLiquideParExercice: int ^= 10000;
const partQualification: int ^= 5;

final class Compte ^=
abstract
	var
		solde: int,
		nip: int,
		date_ouverture: Date,
		date_fermeture: DateFermeture,
		depot_liquide_cet_exercice: nat;
	invariant
		depot_liquide_cet_exercice <= maxDepotLiquideParExercice,
		(
			[date_fermeture within void] : solde >= partQualification,
			[date_fermeture within Date] : solde = 0
		)
interface
	build{
		!solde: int, 
		!nip: int, 
		!date_ouverture: Date, 
		!date_fermeture: DateFermeture,
		!depot_liquide_cet_exercice: nat}
	pre
		(
			[date_fermeture within void] : solde >= partQualification,
			[date_fermeture within Date] : solde = 0
		),
		depot_liquide_cet_exercice <= maxDepotLiquideParExercice;
	//end-build

	schema !retirer(montant: nat)
	pre
		solde - montant >= partQualification,
		date_fermeture within void
	post
		solde! = solde - montant
	assert
		solde' = solde - montant,
		nip' = nip, 
		date_ouverture' = date_ouverture, 
		date_fermeture' = date_fermeture,
		depot_liquide_cet_exercice' = depot_liquide_cet_exercice;
	//end-retirer

	schema !deposer(montant: nat)
	pre
		date_fermeture within void
	post
		solde! = solde + montant
	assert
		solde' = solde + montant,
		nip' = nip, 
		date_ouverture' = date_ouverture, 
		date_fermeture' = date_fermeture,
		depot_liquide_cet_exercice' = depot_liquide_cet_exercice;
	//end-deposer

	schema !viderFerme
	pre
		date_fermeture within Date
	post
		solde! = 0
	assert
		solde' = 0,
		nip' = nip, 
		date_ouverture' = date_ouverture, 
		date_fermeture' = date_fermeture,
		depot_liquide_cet_exercice' = depot_liquide_cet_exercice;
	// end-viderFerme

	schema !deposerLiquide(montant: nat)
	pre
		date_fermeture within void,
		depot_liquide_cet_exercice + montant <= maxDepotLiquideParExercice
	post
		!deposer(montant) then 
		!changer_depotLiquide(depot_liquide_cet_exercice + montant)
	assert
		solde' = solde + montant,
		nip' = nip, 
		date_ouverture' = date_ouverture, 
		date_fermeture' = date_fermeture,
		depot_liquide_cet_exercice' = depot_liquide_cet_exercice + montant;
	// end-deposerLiquide

	schema !changer_depotLiquide(montant: nat)
	pre
		montant <= maxDepotLiquideParExercice
	post
		depot_liquide_cet_exercice! = montant
	assert
		solde' = solde,
		nip' = nip, 
		date_ouverture' = date_ouverture, 
		date_fermeture' = date_fermeture,
		depot_liquide_cet_exercice' = montant;
	// end-changer_depotLiquide

	schema !modifierNIP(nouveauNIP: int)
	pre
		nouveauNIP ~= nip
	post
		nip! = nouveauNIP
	assert
		solde' = solde,
		nip' = nouveauNIP, 
		date_ouverture' = date_ouverture, 
		date_fermeture' = date_fermeture,
		depot_liquide_cet_exercice' = depot_liquide_cet_exercice;
	//end-modifierNIP

	function solde, nip, date_ouverture, date_fermeture, depot_liquide_cet_exercice
end;

const jourDuBilan: int ^= 3;
const moisDuBilan: int ^= 3;
const fraisVirementInterbanque ^= 5;
const fraisDepotInterbanque ^=5;

final class Banque ^=
abstract
	var
		comptes: map of (NumCompte -> Compte),
		soldeGlobal: int,
		soldeVerification: int,
		entreesEffectues: int,
		sortiesEffectues: int,
		gain: int,
		dateBilan: Date;
	invariant
		soldeGlobal = soldeVerification + entreesEffectues - sortiesEffectues,
		dateBilan.jour = jourDuBilan,
		dateBilan.mois = moisDuBilan
interface
	function comptes;

	build{!dateBilan: Date}
	pre
		dateBilan.jour = jourDuBilan,
		dateBilan.mois = moisDuBilan
	post
		soldeGlobal! = 0,
		soldeVerification! = 0,
		entreesEffectues! = 0,
		sortiesEffectues! = 0,
		gain! = 0,
		comptes! = map of (NumCompte -> Compte){};
	//end-build{}

	schema !ouvrirCompte(soldeInit: int, numeroCompte: NumCompte, dateOuverture: Date)
	pre
		soldeInit >= partQualification,
		#comptes < maxNum,
		numeroCompte ~in comptes.dom
	post
		entreesEffectues! = entreesEffectues + soldeInit,
		soldeGlobal! = soldeGlobal + soldeInit,
		comptes! = comptes.append(numeroCompte -> Compte{soldeInit, 0, dateOuverture, null, 0})
	assert
		#comptes' = #comptes + 1,
		soldeGlobal' = soldeGlobal + soldeInit,
		soldeVerification' = soldeVerification,
		entreesEffectues' = entreesEffectues + soldeInit,
		sortiesEffectues' = sortiesEffectues,
		gain' = gain,
		dateBilan' = dateBilan;
	//end-ouvrirCompte

	schema !fermerCompte(numeroCompte: NumCompte, dateFermeture: DateFermeture)
	pre
		numeroCompte in comptes.dom,
		comptes[numeroCompte].solde <= partQualification,
		comptes[numeroCompte].date_fermeture = null,
		dateFermeture within Date
	post
		comptes! =
			comptes.remove(numeroCompte).append(numeroCompte ->
				Compte{0, comptes[numeroCompte].nip, comptes[numeroCompte].date_ouverture, dateFermeture, 0})
	assert
		#comptes' = #comptes,
		numeroCompte in comptes'.dom,
		comptes'[numeroCompte].date_fermeture within Date,
		soldeGlobal' = soldeGlobal,
		soldeVerification' = soldeVerification,
		entreesEffectues' = entreesEffectues,
		sortiesEffectues' = sortiesEffectues,
		gain' = gain,
		dateBilan' = dateBilan;
	//end-fermerCompte

	schema !supprimerCompte(compteAsupprimer: NumCompte, dateDemande: Date)
	pre
		compteAsupprimer in comptes.dom,
		comptes[compteAsupprimer].solde = 0,
		comptes[compteAsupprimer].date_fermeture within Date,
		(
			let dateFermeture ^= (comptes[compteAsupprimer].date_fermeture is Date);
			(dateDemande.annee > dateFermeture.annee +2) |
			(dateDemande.annee = dateFermeture.annee+2 &
				dateDemande.mois > dateFermeture.mois) |
			(dateDemande.annee = dateFermeture.annee+2 &
				dateDemande.mois = dateFermeture.mois &
				dateDemande.jour > dateFermeture.jour)
		)
	post
		comptes! = comptes.remove(compteAsupprimer)
	assert
		#comptes' = #comptes -1;
	//end-supprimerCompte

	schema !viderCompteFerme(compteAvider: NumCompte)
	pre
		compteAvider in comptes.dom,
		comptes[compteAvider].date_fermeture within Date
	post
		sortiesEffectues! = sortiesEffectues + comptes[compteAvider].solde,
		soldeGlobal! = soldeGlobal + comptes[compteAvider].solde,
		comptes[compteAvider]!viderFerme;
	//end-viderCompteFerme

	schema !retirerDuCompte(compteOuRetirer: NumCompte, montant: nat)
	pre
		compteOuRetirer in comptes.dom,
		comptes[compteOuRetirer].solde - montant >= partQualification,
		comptes[compteOuRetirer].date_fermeture within void
	post
		sortiesEffectues! = sortiesEffectues + montant,
		soldeGlobal! = soldeGlobal - montant,
		comptes[compteOuRetirer]!retirer(montant);
	//end-retirerDuCompte

	schema !deposerDansCompte(compteOuDeposer: NumCompte, montant: nat)
	pre
		compteOuDeposer in comptes.dom,
		comptes[compteOuDeposer].date_fermeture within void
	post
		entreesEffectues! = entreesEffectues + montant,
		soldeGlobal! = soldeGlobal + montant,
		comptes[compteOuDeposer]!deposer(montant);
	//end-deposerDansCompte

	schema !deposerLiquideDansCompte(compteOuDeposer: NumCompte, montant: nat)
	pre
		compteOuDeposer in comptes.dom,
		comptes[compteOuDeposer].date_fermeture within void,
		comptes[compteOuDeposer].depot_liquide_cet_exercice + montant <= maxDepotLiquideParExercice
	post
		entreesEffectues! = entreesEffectues + montant,
		soldeGlobal! = soldeGlobal + montant,
		comptes[compteOuDeposer]!deposerLiquide(montant);
	//end-deposerLiquideDansCompte

	schema !virerEntreCompte(compteOrigine: NumCompte, compteDestination: NumCompte, montant: nat)
	pre
		compteOrigine in comptes.dom,
		compteDestination in comptes.dom,
		comptes[compteOrigine].date_fermeture within void,
		comptes[compteDestination].date_fermeture within void,
		comptes[compteOrigine].solde - montant >= partQualification
	post
		!retirerDuCompte(compteOrigine, montant) then
		!deposerDansCompte(compteDestination, montant);
	//end-virerEntreCompte

	schema !changer_NIP(numeroCompte: NumCompte, nouveauNIP: int)
	pre
		numeroCompte in comptes.dom,
		nouveauNIP ~= comptes[numeroCompte].nip
	post
		comptes[numeroCompte]!modifierNIP(nouveauNIP);
	//end-changer_NIP

	schema !verifierBilan(dateJour: Date)
	pre
		dateJour = dateBilan,
		dateBilan.annee <20000,
		(+ over (for i::comptes.dom yield comptes[i].solde)) = soldeGlobal,
		forall x::comptes.ran :- x.depot_liquide_cet_exercice < maxDepotLiquideParExercice
	post
		dateBilan! = Date{dateBilan.jour, dateBilan.mois, dateBilan.annee + 1},
		soldeVerification! = soldeGlobal,
		entreesEffectues! = 0,
		sortiesEffectues! = 0,
		forall x::comptes.dom :- comptes[x]!changer_depotLiquide(0);
	//assert
	//	forall x::comptes'.ran :- x.depot_liquide_cet_exercice = 0;
	//end-verifierBilan

	schema !virerInterBanques(numeroCompte: NumCompte, montant: nat)
	pre
		numeroCompte in comptes.dom,
		comptes[numeroCompte].date_fermeture within void,
		comptes[numeroCompte].solde - montant - fraisVirementInterbanque >= partQualification
	post
		!retirerDuCompte(numeroCompte, montant + fraisVirementInterbanque) then
		gain! = gain + fraisVirementInterbanque;
	//end-virerInterBanques

	schema !deposerInterBanques(numeroCompte: NumCompte, montant: nat)
	pre
		numeroCompte in comptes.dom,
		comptes[numeroCompte].date_fermeture within void,
		montant >= fraisDepotInterbanque
	post
		!deposerDansCompte(numeroCompte, montant - fraisDepotInterbanque) then
		gain! = gain + fraisDepotInterbanque;
	//end-deposerInterBanques
end;


const maxB: nat ^= 1000;
class NumB ^= those j: nat :- 1 <= j <= maxB;

final class Transactions ^=
abstract
	var
		banques: map of (NumB -> Banque),
		sortiesComptes: nat,
		depotsComptes: nat,
		frais: nat;
	invariant
		sortiesComptes = depotsComptes + frais
interface
	function banques, sortiesComptes, depotsComptes, frais;

	build{}
	post
		banques! = map of (NumB -> Banque){},
		sortiesComptes! = 0,
		depotsComptes! = 0,
		frais! = 0;
	//end-build

	schema !inscrireBanque(banqueNum: NumB, nouvelleBanque: Banque)
	pre
		nouvelleBanque ~in banques.ran,
		banqueNum ~in banques.dom
	post
		banques! = banques.append(banqueNum -> nouvelleBanque);
	//end-inscrireBanque

	schema !virer(banqueSource: NumB, compteSource: NumCompte, banqueDest: NumB, compteDest: NumCompte, montant: nat)
	pre
		montant >= fraisDepotInterbanque,
		banqueSource in banques.dom,
		banqueDest in banques.dom,
		banqueSource ~= banqueDest,
		compteSource in banques[banqueSource].comptes,
		compteDest in banques[banqueDest].comptes,
		banques[banqueSource].comptes[compteSource].date_fermeture within void,
		banques[banqueDest].comptes[compteDest].date_fermeture within void,
		banques[banqueSource].comptes[compteSource].solde - montant - fraisVirementInterbanque > partQualification
	post
		sortiesComptes! = sortiesComptes + montant + fraisVirementInterbanque,
		depotsComptes! = depotsComptes + montant - fraisDepotInterbanque,
		frais! = frais + fraisVirementInterbanque + fraisDepotInterbanque,
		banques[banqueSource]!virerInterBanques(compteSource, montant),
		banques[banqueDest]!deposerInterBanques(compteDest, montant);
	//end-virer
end;

// End